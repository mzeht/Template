package com.wpmac.androidnougatframework.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXPRESS".
*/
public class ExpressDao extends AbstractDao<Express, Long> {

    public static final String TABLENAME = "EXPRESS";

    /**
     * Properties of entity Express.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property EmployeeNo = new Property(1, String.class, "employeeNo", false, "EMPLOYEE_NO");
        public final static Property PhoneNumber = new Property(2, String.class, "phoneNumber", false, "PHONE_NUMBER");
        public final static Property PaymentType = new Property(3, String.class, "paymentType", false, "PAYMENT_TYPE");
        public final static Property IsChecked = new Property(4, boolean.class, "isChecked", false, "IS_CHECKED");
        public final static Property MoudleName = new Property(5, String.class, "moudleName", false, "MOUDLE_NAME");
        public final static Property ExpressNo = new Property(6, String.class, "expressNo", false, "EXPRESS_NO");
        public final static Property ExpressName = new Property(7, String.class, "expressName", false, "EXPRESS_NAME");
        public final static Property ExpressLogo = new Property(8, String.class, "expressLogo", false, "EXPRESS_LOGO");
        public final static Property ExpressNumber = new Property(9, String.class, "expressNumber", false, "EXPRESS_NUMBER");
        public final static Property OwnPhoneNumber = new Property(10, String.class, "ownPhoneNumber", false, "OWN_PHONE_NUMBER");
        public final static Property Fee = new Property(11, String.class, "fee", false, "FEE");
        public final static Property ShelfNo = new Property(12, String.class, "shelfNo", false, "SHELF_NO");
        public final static Property Type = new Property(13, String.class, "type", false, "TYPE");
        public final static Property DeReason = new Property(14, String.class, "deReason", false, "DE_REASON");
        public final static Property ReturnReason = new Property(15, String.class, "returnReason", false, "RETURN_REASON");
        public final static Property Remark = new Property(16, String.class, "remark", false, "REMARK");
        public final static Property PointBranchNo = new Property(17, String.class, "pointBranchNo", false, "POINT_BRANCH_NO");
    }


    public ExpressDao(DaoConfig config) {
        super(config);
    }
    
    public ExpressDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXPRESS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"EMPLOYEE_NO\" TEXT," + // 1: employeeNo
                "\"PHONE_NUMBER\" TEXT," + // 2: phoneNumber
                "\"PAYMENT_TYPE\" TEXT," + // 3: paymentType
                "\"IS_CHECKED\" INTEGER NOT NULL ," + // 4: isChecked
                "\"MOUDLE_NAME\" TEXT," + // 5: moudleName
                "\"EXPRESS_NO\" TEXT," + // 6: expressNo
                "\"EXPRESS_NAME\" TEXT," + // 7: expressName
                "\"EXPRESS_LOGO\" TEXT," + // 8: expressLogo
                "\"EXPRESS_NUMBER\" TEXT," + // 9: expressNumber
                "\"OWN_PHONE_NUMBER\" TEXT," + // 10: ownPhoneNumber
                "\"FEE\" TEXT," + // 11: fee
                "\"SHELF_NO\" TEXT," + // 12: shelfNo
                "\"TYPE\" TEXT," + // 13: type
                "\"DE_REASON\" TEXT," + // 14: deReason
                "\"RETURN_REASON\" TEXT," + // 15: returnReason
                "\"REMARK\" TEXT," + // 16: remark
                "\"POINT_BRANCH_NO\" TEXT);"); // 17: pointBranchNo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXPRESS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Express entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String employeeNo = entity.getEmployeeNo();
        if (employeeNo != null) {
            stmt.bindString(2, employeeNo);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(3, phoneNumber);
        }
 
        String paymentType = entity.getPaymentType();
        if (paymentType != null) {
            stmt.bindString(4, paymentType);
        }
        stmt.bindLong(5, entity.getIsChecked() ? 1L: 0L);
 
        String moudleName = entity.getMoudleName();
        if (moudleName != null) {
            stmt.bindString(6, moudleName);
        }
 
        String expressNo = entity.getExpressNo();
        if (expressNo != null) {
            stmt.bindString(7, expressNo);
        }
 
        String expressName = entity.getExpressName();
        if (expressName != null) {
            stmt.bindString(8, expressName);
        }
 
        String expressLogo = entity.getExpressLogo();
        if (expressLogo != null) {
            stmt.bindString(9, expressLogo);
        }
 
        String expressNumber = entity.getExpressNumber();
        if (expressNumber != null) {
            stmt.bindString(10, expressNumber);
        }
 
        String ownPhoneNumber = entity.getOwnPhoneNumber();
        if (ownPhoneNumber != null) {
            stmt.bindString(11, ownPhoneNumber);
        }
 
        String fee = entity.getFee();
        if (fee != null) {
            stmt.bindString(12, fee);
        }
 
        String shelfNo = entity.getShelfNo();
        if (shelfNo != null) {
            stmt.bindString(13, shelfNo);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(14, type);
        }
 
        String deReason = entity.getDeReason();
        if (deReason != null) {
            stmt.bindString(15, deReason);
        }
 
        String returnReason = entity.getReturnReason();
        if (returnReason != null) {
            stmt.bindString(16, returnReason);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(17, remark);
        }
 
        String pointBranchNo = entity.getPointBranchNo();
        if (pointBranchNo != null) {
            stmt.bindString(18, pointBranchNo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Express entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String employeeNo = entity.getEmployeeNo();
        if (employeeNo != null) {
            stmt.bindString(2, employeeNo);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(3, phoneNumber);
        }
 
        String paymentType = entity.getPaymentType();
        if (paymentType != null) {
            stmt.bindString(4, paymentType);
        }
        stmt.bindLong(5, entity.getIsChecked() ? 1L: 0L);
 
        String moudleName = entity.getMoudleName();
        if (moudleName != null) {
            stmt.bindString(6, moudleName);
        }
 
        String expressNo = entity.getExpressNo();
        if (expressNo != null) {
            stmt.bindString(7, expressNo);
        }
 
        String expressName = entity.getExpressName();
        if (expressName != null) {
            stmt.bindString(8, expressName);
        }
 
        String expressLogo = entity.getExpressLogo();
        if (expressLogo != null) {
            stmt.bindString(9, expressLogo);
        }
 
        String expressNumber = entity.getExpressNumber();
        if (expressNumber != null) {
            stmt.bindString(10, expressNumber);
        }
 
        String ownPhoneNumber = entity.getOwnPhoneNumber();
        if (ownPhoneNumber != null) {
            stmt.bindString(11, ownPhoneNumber);
        }
 
        String fee = entity.getFee();
        if (fee != null) {
            stmt.bindString(12, fee);
        }
 
        String shelfNo = entity.getShelfNo();
        if (shelfNo != null) {
            stmt.bindString(13, shelfNo);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(14, type);
        }
 
        String deReason = entity.getDeReason();
        if (deReason != null) {
            stmt.bindString(15, deReason);
        }
 
        String returnReason = entity.getReturnReason();
        if (returnReason != null) {
            stmt.bindString(16, returnReason);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(17, remark);
        }
 
        String pointBranchNo = entity.getPointBranchNo();
        if (pointBranchNo != null) {
            stmt.bindString(18, pointBranchNo);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Express readEntity(Cursor cursor, int offset) {
        Express entity = new Express( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // employeeNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // phoneNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // paymentType
            cursor.getShort(offset + 4) != 0, // isChecked
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // moudleName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // expressNo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // expressName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // expressLogo
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // expressNumber
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ownPhoneNumber
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // fee
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // shelfNo
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // type
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // deReason
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // returnReason
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // remark
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // pointBranchNo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Express entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEmployeeNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhoneNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPaymentType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsChecked(cursor.getShort(offset + 4) != 0);
        entity.setMoudleName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setExpressNo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setExpressName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setExpressLogo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setExpressNumber(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setOwnPhoneNumber(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFee(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setShelfNo(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setType(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDeReason(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setReturnReason(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setRemark(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setPointBranchNo(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Express entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Express entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Express entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
